global:
  keycloak:
    authServerUrl: http://cityos-keycloak-http/cityos-auth

replicaCount: 1

image:
  repository: ghcr.io/starwit/city-demos
  tag: "v1.1.1-10"
  pullPolicy: Always

imagePullSecrets:
  - name: citydockerreg
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 8081
  endpoint:
    traffic: http://localhost/traffic/api
    grafana: http://localhost/grafana
    auth:
      enable: true

serviceAccount:
  create: false
autoscaling:
  enabled: false

initContainers:
  wait4mariadb:
    image: busybox
    tag: latest
  curl:
    image: curlimages/curl
    tag: latest

# add extra environment params to app server
extraEnv: |
  - name: VW2_CLIENTID
    value: clientid
  - name: VW2_CLIENT_SECRET
    value: secret
  - name: VW2_DATACAPTURERSTATUS
    value: https://carmel.vw2-demospace.de/vw2datacapture/api/datapoint
  - name: VW2_DATACAPTURERCAMURL
    value: https://carmel.vw2-demospace.de/vw2datacapture/api/cameras
  - name: VW2_AUTHURL
    value: https://carmel2.vw2-demospace.de/carmel-smart-cities-auth/realms/icv/protocol/openid-connect/token
  - name: VW2_CAMERASERVICEURL
    value: https://carmel2.vw2-demospace.de/carmel-smart-cities-cameraservice/v1/cameras

# adapt if other ingress controller as traefik is used.
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik
  #    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: localhost
#  tls:
#    - secretName: host-tls
#      hosts:
#        - localhost

mariadb:
  auth:
    rootPassword: root
    database: citydashboard
    username: citydashboard
    password: yourpassword

keycloak:
  auth:
    adminUser: admin
    adminPassword: yourpassword
  production: true
  proxy: edge
  keycloakConfigCli:
    enabled: true
    existingConfigmap: { { .Release.Name } }-realm-json
  postgresql:
    enabled: true
    auth:
      postgresPassword: auth
      username: auth
      password: auth
      database: keycloak
  ingress:
    enabled: true
    hostname: localhost
    path: "/cityos-auth"
    annotations:
      kubernetes.io/ingress.class: "traefik"

#keycloak:
#  contextPath: cityos-auth
#  extraEnv: |
#    - name: KEYCLOAK_IMPORT
#      value: /realm/realm.json
#    - name: KEYCLOAK_USER
#      value: admin
#    - name: KEYCLOAK_PASSWORD
#      value: yourpassword
#    - name: PROXY_ADDRESS_FORWARDING
#      value: "true"
#    - name: KEYCLOAK_FRONTEND_URL
#      value: http://localhost/cityos-auth
#  extraVolumeMounts: |
#    - name: realm-json
#      mountPath: "/realm/"
#      readOnly: true
#  extraVolumes: |
#    - name: realm-json
#      configMap:
#        name: {{ .Release.Name }}-realm-json
#    {{- if eq .Values.development true }}
#    - name: realm-user-json
#      configMap:
#        name: {{ .Release.Name }}-realm-dev-user-json
#  ingress:
#    enabled: true
#    annotations:
#      kubernetes.io/ingress.class: "traefik"
#    #      cert-manager.io/cluster-issuer: letsencrypt-prod
#    rules:
#      - host: localhost
#        paths:
#          - path: /cityos-auth
#            pathType: Prefix
#  #    tls:
#  #      - secretName: localhost-tls
#  #        hosts:
#  #        - localhost
#
#  startupScripts:
#    # cli script that reconfigures WildFly
#    contextPath.cli: |
#      embed-server --server-config=standalone-ha.xml --std-out=echo
#      batch
#      {{- if ne .Values.contextPath "auth" }}
#      /subsystem=keycloak-server/:write-attribute(name=web-context,value={{ if eq .Values.contextPath "" }}/{{ else }}{{ .Values.contextPath }}{{ end }})
#      {{- if eq .Values.contextPath "" }}
#      /subsystem=undertow/server=default-server/host=default-host:write-attribute(name=default-web-module,value=keycloak-server.war)
#      {{- end }}
#      {{- end }}
#      run-batch
#      stop-embedded-server
#
#  livenessProbe: |
#    httpGet:
#      path: /cityos-auth/
#      port: http
#    initialDelaySeconds: 0
#    timeoutSeconds: 5
#
#  # Readiness probe configuration
#  readinessProbe: |
#    httpGet:
#      path: /cityos-auth/realms/master
#      port: http
#    initialDelaySeconds: 30
#    timeoutSeconds: 1
#  # Startup probe configuration
#
#  startupProbe: |
#    httpGet:
#      path: /cityos-auth/
#      port: http
#    initialDelaySeconds: 30
#    timeoutSeconds: 1
#    failureThreshold: 60
#    periodSeconds: 5