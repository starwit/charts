global:
  keycloak:
    authServerUrl: http://cityos-keycloak-http/cityos-auth

replicaCount: 1

image:
  repository: ghcr.io/starwit/city-demos/backend
  pullPolicy: Always

imagePullSecrets:
  - name: citydockerreg
nameOverride: ""
fullnameOverride: ""

initContainers:
  resources: { }

endpoints:
  traffic: http://localhost/traffic/api
  grafana: http://localhost/grafana
endpointAuth:
  enabled: true

cityos:
  auth:
    issuerUrl: http://localhost/cityos-auth/realms/citydashboard

# add extra environment params to app server
extraEnv: |
  - name: VW2_CLIENTID
    value: clientid
  - name: VW2_CLIENT_SECRET
    value: secret
  - name: VW2_DATACAPTURERSTATUS
    value: https://carmel.vw2-demospace.de/vw2datacapture/api/datapoint
  - name: VW2_DATACAPTURERCAMURL
    value: https://carmel.vw2-demospace.de/vw2datacapture/api/cameras
  - name: VW2_AUTHURL
    value: https://carmel2.vw2-demospace.de/carmel-smart-cities-auth/realms/icv/protocol/openid-connect/token
  - name: VW2_CAMERASERVICEURL
    value: https://carmel2.vw2-demospace.de/carmel-smart-cities-cameraservice/v1/cameras
#  - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY
#    value: DEBUG
serviceAccount:
  create: false

traefik:
  middleware:
    stripprefix: false

ingress:
  enabled: true
  hosts:
    - host: localhost
      paths:
        - pathType: Prefix
  tls:
    enabled: false

postgresql:
  serviceurl: timescale-timescaledb
  serviceport: 5432
  auth:
    database: citydashboard
    username: citydashboard
    password: citydashboard

keycloak:
  auth:
    adminUser: admin
    adminPassword: yourpassword
  production: true
  proxy: edge
  ingress:
    enabled: true
    hostname: localhost
    path: "/cityos-auth"
    tls: 
      - secretName: host-tls
        hosts:
        - localhost
  keycloakConfigCli:
    enabled: true
    command:
      - java
      - -jar
      - /app/keycloak-config-cli.jar
    image:
      repository: adorsys/keycloak-config-cli
      tag: latest
    configuration:
      realm.json: |-
        {
        "id": "citydashboard",
        "realm": "citydashboard",
        "enabled": true,
        "roles": {
            "realm": [
            {
                "name": "ROLE_user",
                "composite": false,
                "clientRole": false,
                "containerId": "citydashboard",
                "attributes": {}
            },
            {
                "name": "ROLE_admin",
                "composite": false,
                "clientRole": false,
                "containerId": "citydashboard",
                "attributes": {}
            },
            {
                "name": "ROLE_reader",
                "composite": false,
                "clientRole": false,
                "containerId": "citydashboard",
                "attributes": {}
            }
            ],
            "client": {
            "citydashboard": []
            }
        },
        "groups": [
            {
            "name": "public",
            "path": "/public",
            "attributes": {},
            "realmRoles": [
                "ROLE_reader"
            ],
            "clientRoles": {},
            "subGroups": []
            }
        ],
        "defaultGroups": [
            "/public"
        ],
        "clients": [
            {
            "clientId": "citydashboard",
            "name": "citydashboard",
            "rootUrl": "",
            "baseUrl": "",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "redirectUris": [
                "*"
            ],
            "webOrigins": [
                "*"
            ],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "publicClient": true,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
                "id.token.as.detached.signature": "false",
                "saml.assertion.signature": "false",
                "saml.force.post.binding": "false",
                "saml.multivalued.roles": "false",
                "saml.encrypt": "false",
                "login_theme": "keycloak",
                "oauth2.device.authorization.grant.enabled": "false",
                "backchannel.logout.revoke.offline.tokens": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "use.refresh.tokens": "true",
                "exclude.session.state.from.auth.response": "false",
                "oidc.ciba.grant.enabled": "false",
                "saml.artifact.binding": "false",
                "backchannel.logout.session.required": "true",
                "client_credentials.use_refresh_token": "false",
                "saml_force_name_id_format": "false",
                "require.pushed.authorization.requests": "false",
                "saml.client.signature": "false",
                "tls.client.certificate.bound.access.tokens": "false",
                "saml.authnstatement": "false",
                "display.on.consent.screen": "false",
                "saml.onetimeuse.condition": "false"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": true,
            "nodeReRegistrationTimeout": -1,
            "protocolMappers": [
                {
                "name": "groups",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-group-membership-mapper",
                "consentRequired": false,
                "config": {
                    "full.path": "false",
                    "id.token.claim": "false",
                    "access.token.claim": "true",
                    "claim.name": "groups",
                    "userinfo.token.claim": "true"
                }
                }
            ],      
            "defaultClientScopes": [
                "web-origins",
                "roles",
                "profile",
                "email"
            ],
            "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
            ]
            }
        ]
        }
  postgresql:
    enabled: true
    auth:
      postgresPassword: auth
      username: auth
      password: auth
      database: keycloak
  httpRelativePath: "/cityos-auth/"

